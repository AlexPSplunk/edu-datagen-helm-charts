## Instantly create a cronjob
# kubectl create job --from=cronjob/cleaner cleaner-one -n default
    #podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Failed -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo "$podNames"

apiVersion: v1
data:
  cleanup-failed.sh: |
    #!/bin/bash
    function GetPods() {
          shift
          local arr=($@)
          if [[ $arr == "" ]]; then
              echo "No Pod Scheduled for Deletion"
          else
            for i in ${!arr[@]}; do
                echo -e "\nNo:  $i Pod: ${arr[$i]} Namespace: $NAMESPACE"
                kubectl delete pods "${arr[$i]}" --force --grace-period=0 -n $NAMESPACE || echo "Unable to Delete."
            done
          fi
    }

    export NAMESPACE=''
    export a=$(kubectl get namespace | awk '{print $1}' | tail -n +2)
    for i in $a; do
    #echo "Namespace: $i" && export NAMESPACE=$i && podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Failed -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo $podNames
      echo "Namespace: $i" && export NAMESPACE=$i && podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Failed -o go-template --template '{{ .Values.string_literals.go_template }}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo $podNames
      GetPods "${podNames[@]}"  && echo -e '\n\n' && podNames=''
    done

    podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Failed -o go-template --template '{{ .Values.string_literals.go_template }}'  | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo "$podNames"

  cleanup-cleaner.sh: |
    #!/bin/bash
    function GetPods() {
          shift
          local arr=($@)
          if [[ $arr == "" ]]; then
              echo "No Pod Scheduled for Deletion"
          else
            for i in ${!arr[@]}; do
                echo -e "\nNo:  $i Pod: ${arr[$i]} Namespace: $NAMESPACE"
                kubectl delete pods "${arr[$i]}" --force --grace-period=0 -n $NAMESPACE || echo "Unable to Delete."
            done
          fi
    }

    export NAMESPACE=''
    export a=$(kubectl get namespace | awk '{print $1}' | tail -n +2)
    for i in $a; do
      echo "Namespace: $i" && export NAMESPACE=$i && podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Succeeded -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo $podNames
      GetPods "${podNames[@]}"  && echo -e '\n\n' && podNames=''
    done

    podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Succeeded -o go-template --template '{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }') && podNames=($podNames) && echo "$podNames"

  date-an-hour-ago.sh: |
    #!/bin/bash
    
    # Extract the components of the current date and time
    current_year=$(date -u +"%Y")
    current_month=$(date -u +"%m")
    current_day=$(date -u +"%d")
    current_hour=$(date -u +"%H")
    current_minute=$(date -u +"%M")
    current_second=$(date -u +"%S")
    
    # Subtract one hour from the current hour
    one_hour_ago_hour=$((current_hour - 1))
    
    # Handle cases where the hour becomes negative
    if [ $one_hour_ago_hour -lt 0 ]; then
        # Decrement the day by one
        current_day=$((current_day - 1))
    
        # Adjust the hour to 23 (11 PM)
        one_hour_ago_hour=23
    fi
    
    # Format the one hour ago date and time
    one_hour_ago="${current_year}-${current_month}-${current_day}T${one_hour_ago_hour}:${current_minute}:${current_second}Z"
    
    echo  "$one_hour_ago"

  date-script.sh: |
    #!/bin/sh

    # Get the current date and time in UTC
    current_date=$(date -u +"%Y-%m-%dT%H:%M:%S")

    # Extract the components of the current date and time
    current_year=$(date -u +"%Y")
    current_month=$(date -u +"%m")
    current_day=$(date -u +"%d")
    current_hour=$(date -u +"%H")
    current_minute=$(date -u +"%M")
    current_second=$(date -u +"%S")

    # Subtract 30 minutes from the current time
    one_hour_ago_minute=$((current_minute - 30))
    one_hour_ago_hour=$current_hour
    one_hour_ago_day=$current_day
    one_hour_ago_month=$current_month
    one_hour_ago_year=$current_year

    # Handle cases where the minute becomes negative
    if [ $one_hour_ago_minute -lt 0 ]; then
        # Subtract one hour
        one_hour_ago_hour=$((current_hour - 1))
        one_hour_ago_minute=$((current_minute + 30))
        # Handle cases where the hour becomes negative
        if [ $one_hour_ago_hour -lt 0 ]; then
            # Subtract one day
            one_hour_ago_day=$((current_day - 1))
            one_hour_ago_hour=23
            # Handle cases where the day becomes negative
            if [ $one_hour_ago_day -lt 1 ]; then
                # Subtract one month
                one_hour_ago_month=$((current_month - 1))
                # Handle cases where the month becomes negative
                if [ $one_hour_ago_month -lt 1 ]; then
                    # Subtract one year
                    one_hour_ago_year=$((current_year - 1))
                    # Set the month to December (12)
                    one_hour_ago_month=12
                fi
                # Get the last day of the previous month
                one_hour_ago_day=$(date -u -d "$one_hour_ago_year-$one_hour_ago_month-01 - 1 day" +"%d")
            fi
        fi
    fi

    # Format the 30 minutes ago date and time
    thirty_minutes_ago="${one_hour_ago_year}-${one_hour_ago_month}-${one_hour_ago_day}T${one_hour_ago_hour}:${one_hour_ago_minute}:${current_second}"

    echo "$thirty_minutes_ago"
    

kind: ConfigMap
metadata:
  namespace: default
  name: cleaner-config
