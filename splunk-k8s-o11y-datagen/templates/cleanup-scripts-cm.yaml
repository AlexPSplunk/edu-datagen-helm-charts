## Instantly create a cronjob
# kubectl create job --from=cronjob/cleaner cleaner-one -n default
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: cleaner-config
data:
  cleanup-failed.sh: |
    #!/bin/bash
    function GetPods() {
          shift
          local arr=($@)
          if [[ $arr == "" ]]; then
              echo "No Pod Scheduled for Deletion"
          else
            for i in ${!arr[@]}; do
                echo -e "\nNo:  $i Pod: ${arr[$i]} Namespace: $NAMESPACE"
                kubectl delete pods "${arr[$i]}" --force --grace-period=0 -n $NAMESPACE || echo "Unable to Delete."
            done
          fi
    }

    export NAMESPACE=''
    export a=$(kubectl get namespace | awk '{print $1}' | tail -n +2)
    for i in $a; do
      echo "Namespace: $i" && export NAMESPACE=$i
      podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Failed -o go-template --template '{{ "{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}" }}{{- "{{" -}} "\n" {{- "}}" -}}{{ "{{end}}" }}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }')
      podNames=($podNames) && echo $podNames
      GetPods "${podNames[@]}"  && echo -e '\n\n' && podNames=''
    done


  cleanup-cleaner.sh: |
    #!/bin/bash
    function GetPods() {
          shift
          local arr=($@)
          if [[ $arr == "" ]]; then
              echo "No Pod Scheduled for Deletion"
          else
            for i in ${!arr[@]}; do
                echo -e "\nNo:  $i Pod: ${arr[$i]} Namespace: $NAMESPACE"
                kubectl delete pods "${arr[$i]}" --force --grace-period=0 -n $NAMESPACE || echo "Unable to Delete."
            done
          fi
    }

    export NAMESPACE=''
    export a=$(kubectl get namespace | awk '{print $1}' | tail -n +2)
    for i in $a; do
      echo "Namespace: $i" && export NAMESPACE=$i
      podNames=$(kubectl get pods -n $NAMESPACE --sort-by=.metadata.creationTimestamp --field-selector status.phase=Succeeded -o go-template --template '{{ "{{range .items}}{{.metadata.name}} {{.metadata.creationTimestamp}}" }}{{- "{{" -}} "\n" {{- "}}" -}}{{ "{{end}}" }}' | awk '$2 <= "'$(/home/date-script.sh)'" { print $1 }')
      podNames=($podNames) && echo $podNames
      GetPods "${podNames[@]}"  && echo -e '\n\n' && podNames=''
    done


  date-script.sh: |
    #!/bin/bash
    
    MINS_AGO=30
    # Extract the components of the current date and time
    current_year=$(date -u +"%Y")
    current_month=$(date -u +"%m")
        current_day=$(date -u +"%d")
    current_hour=$(date -u +"%H")
    current_minute=$(date -u +"%M")
    current_second=$(date -u +"%S")

    # Subtract $MINS_AGO minutes from the current time
    x_mins_ago_minute=$((current_minute - $MINS_AGO))
    x_mins_ago_hour=$current_hour
    x_mins_ago_day=$current_day
    x_mins_ago_month=$current_month
    x_mins_ago_year=$current_year

    # Handle cases where the minute becomes negative
    if [ $x_mins_ago_minute -lt 0 ]; then
        # Subtract one hour
        x_mins_ago_hour=$((current_hour - 1))
        x_mins_ago_minute=$((x_mins_ago_minute + 60))
        # Handle cases where the hour becomes negative
        if [ $x_mins_ago_hour -lt 0 ]; then
            # Subtract one day
            x_mins_ago_day=$((current_day - 1))
            x_mins_ago_hour=23
            # Handle cases where the day becomes negative
            if [ $x_mins_ago_day -lt 1 ]; then
                # Subtract one month
                x_mins_ago_month=$((current_month - 1))
                # Handle cases where the month becomes negative
                if [ $x_mins_ago_month -lt 1 ]; then
                    # Subtract one year
                    x_mins_ago_year=$((current_year - 1))
                    # Set the month to December (12)
                    x_mins_ago_month=12
                fi
                # Get the last day of the previous month
                x_mins_ago_day=$(date -u -d "$x_mins_ago_year-$x_mins_ago_month-01 - 1 day" +"%d")
            fi
        fi
    fi

    # Format the $MINS_AGO minutes ago date and time
    some_minutes_ago="${x_mins_ago_year}-${x_mins_ago_month}-${x_mins_ago_day}T${x_mins_ago_hour}:${x_mins_ago_minute}:${current_second}"

    echo "$some_minutes_ago"


kind: ConfigMap
metadata:
  namespace: default
  name: cleaner-config
